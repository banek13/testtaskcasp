---
# tasks file for dockercompose-test

  - name: create test task data directory
    file:
      path: "{{ item }}"
      state: directory
      mode: 0755
    tags: testtask
    with_items:
      - "{{ testtask_root_path }}"
      - "{{ testtask_webphpdb_path }}"
      - "{{ testtask_balancer_path }}"
      - "{{ testtask_mysqldata_path }}"
      - "{{ testtask_wwwfiles_path }}"

  - name: set docker-compose
    template:
      src: docker-compose.yml.j2
      dest: "{{ testtask_root_path}}/docker-compose.yml"
      mode: 0700
    tags: testtask

  - name: docker-compose environment file
    copy:
      src: .env
      dest: "{{ testtask_root_path}}"

  - name: Prepare Dockerfile for webphpdb
    copy:
      src: "Dockerfile.webphpdb"
      dest: "{{ testtask_webphpdb_path }}/Dockerfile"

  - name: Prepare other files for webphpdb
    copy: 
      src: "{{ item }}"
      dest: "{{ testtask_webphpdb_path }}/"
    with_items:
        - wrapper_script.sh
        - config
        - docker-entrypoint.sh

  - name: set 000-default.conf
    template:
      src: 001-symfony.conf.j2
      dest: "{{ testtask_wwwfiles_path }}/001-symfony.conf"
      mode: 0700


  - name: prepare website file
    docker_container:
      recreate: yes
      image: composer:1.8.5
      name: "{{ webphpdb_host }}-datagen"
      volumes:
        - "{{ testtask_wwwfiles_path }}:/app"
        - /tmp:/tmp
      working_dir: /app
#      user: www-data
      command: ibash -c "composer create-project symfony/symfony-demo {{ webphpdb_host }} && cd {{ webphpdb_host }} && composer require symfony/apache-pack" 

  - name: Prepare Dockerfile for webphpdb
    copy:
      src: "Dockerfile.symfonydemo"
      dest: "{{ testtask_webphpdb_path }}/Dockerfile"


  - name: check if the containers is running
    shell: docker-compose ps
    args:
      chdir: "{{ testtask_root_path }}"
    register: testtaskIsRunning
    changed_when: false

  - name: start testtask
    shell: docker-compose up -d --build --remove-orphans
    args:
      chdir: "{{ testtask_root_path }}"
#    when: (testtaskIsRunning.stdout_lines | length) == 2
